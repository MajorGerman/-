### Hero/Soldier ###

"""Модуль содержит классы героев и солдат."""
import random # Подключаем библиотеку для случайного выбора
goods = [] # Создаем массив для команды хороших
bads = []  # Создаем массив для команды плохих
teams = ["goods","bads"] # Создаем массив для случайного выбора
class Hero():
    """Класс Герой.
Конструктор принимает ИД, команду и уровень."""
    command = "" # Ставим базовое значение команды
    level = 0    # Ставим базовое значение уровня
    def LevelUp(self):
        """Метод повышения уровня персонажа"""
        self.level += 1  # Увеличиваем уровень героя
class Soldier(Hero):
    """Класс Солдат.
Конструктор принимает ИД и команду"""
    command = ""  # Ставим базовое значение команды
    def GoToHero(self, hero_any):
        """Метод следования за героем."""
        if hero_any == "goods":
            print("Солдат с ид ", self.id, ' идёт за героем "Хороший", с ид', hero_good.id)  # Выводим данные
        else:
            print("Солдат с ид ", self.id, ' идёт за героем "Плохой", с ид', hero_bad.id)    # Выводим данные
hero_bad = Hero()
"""Объект героя команды плохих""" 
hero_bad.id = 1   # Задаем ИД герою
hero_good = Hero()
"""Объект героя команды хороших""" 
hero_good.id = 2  # Задаем ИД герою
hero_any = Hero()
"""Объект героя для метода""" 
for x in range(3,23):
    soldier = Soldier() 
    """Объект случайного солдата""" 
    command = random.choice(teams) # Случайный выбор команды
    if command == "goods":
        soldier.command = "good"    # Задаем команду солдату
        soldier.id = x              # Задаем ИД солдату
        goods.append(soldier)       # Подолняем массив хороших
    else:
        soldier.command = "bads"    # Задаем команду солдату
        soldier.id = x              # Задаем ИД солдату
        bads.append(soldier)        # Подолняем массив плохих
    if len(goods) > len(bads):
        hero_good.LevelUp()  # Вызываем метод повышения уровня хорошим
    else:
        hero_bad.LevelUp()   # Вызываем метод повышения уровня плохим
soldier.GoToHero(command) # Вызываем метод следования за героем




### Warrior ###

"""Модуль содержит классы героев и солдат."""
import time, random # Подключаем библиотеки для задержки и случайного выбора
class Warrior():
    """Класс Воин.
Конструктор принимает здоровье."""
    health = 0  # Задаем базовое значение здоровья
    def getDamage(self):
        """Метод получения урона."""
        self.health -= 20   # Отнимаем 20 единиц здоровья у выполняющего метод объекта (self)
pers_1 = pers_2 = Warrior()
"""Объекты двух воинов."""
pers_1.health = pers_2.health = 100    # Задаем здоровье в 100 единиц обоим воинам
while pers_1.health > 0 and pers_2.health > 0: #
    choice = random.randint(1,2)  # Случайный выбор атакующего
    if choice == 1:
        pers_2.getDamage()   # Вызываем метод получения урона для 2 воина
        print("\nВоин 1 ударил воина 2"); print("Здоровье воина 1: ",pers_1.health); print("Здоровье воина 2: ",pers_2.health)
    else:
        pers_1.getDamage()   # Вызываем метод получения урона для 2 воина
        print("\nВоин 2 ударил воина 1"); print("Здоровье воина 1: ",pers_1.health); print("Здоровье воина 2: ",pers_2.health)
    time.sleep(0.75)   # Небольшая задержка, чтобы программа не проходила мнговенно
if pers_1.health <= 0:
    print("\nПобедил воин 2!")  # Оповещение о победе 2 воина
else :
    print("\nПобедил воин 1!")  # Оповещение о победе 1 воина